-- This SQL script prepares cohort analysis.
-- It performs three tasks: database management, data import and data wrangling.

-- Storing data in table "dataset" from database "cohort-analysis".

DROP TABLE IF EXISTS dataset;

CREATE TABLE dataset(
    rating_id integer UNIQUE NOT NULL,
    user_id integer NOT NULL,
    movie_id integer NOT NULL,
    rating numeric,
    rating_timestamp numeric,
    title varchar(250),	
    genres varchar(250),
    PRIMARY KEY (rating_id)
);

-- Restoring data to the table "dataset" in the database "cohort-analysis".
-- A zipped copy of data is available at https://github.com/Dev-P-L/Cohort-Analysis
-- in a zipped CSV file under the name 02_data_import_from_recommendation_project.zip 
-- or with the link:
-- https://raw.githubusercontent.com/Dev-P-L/Cohort-Analysis/master/02_data_import_from_recommendation_project.zip .
-- In the code hereunder, it is imported in local; it could as well be imported from the repository.

COPY dataset(
    rating_id, 
    user_id, 
    movie_id, 
    rating,
	rating_timestamp,
	title,
	genres
) 
FROM 
    'E:\14_Data_Science_SQL\10_Cohort_Analysis\01_data_import_from_recommendation_project.csv' 
    DELIMITER ',' CSV HEADER;
	 	
-- Creating temporary table "movie_prep" from a subset from the table "dataset",
-- avoiding duplicates, extracting movie release year from title 
-- and replacing the pipe characters with commas.

DROP TABLE IF EXISTS movie_prep;

SELECT 
    DISTINCT ON (movie_id) movie_id,
    LEFT(RIGHT(title, 5), 4) AS release_year,
	replace(genres, '|', ',') AS genres
INTO TEMP TABLE movie_prep
FROM 
    dataset
ORDER BY movie_id
;

-- Let's have a look at genres: actually, these are composite genres
-- often combining two or more basic genres as it is showcased in 
-- the following CSV file. 

DROP TABLE IF EXISTS composite_genre_sample;

SELECT 
    movie_id,
	title,
	genres 
INTO TEMP TABLE composite_genre_sample
FROM 
    dataset
LIMIT 5
; 

-- Let's export the temporary table "composite_genre_sample" as a CSV file,
-- for integration into the final report. 

COPY (SELECT * FROM composite_genre_sample) 
    TO 'E:\14_Data_Science_SQL\10_Cohort_Analysis\03_data_wrangling_composite_genre_sample.csv' 
    WITH (FORMAT CSV, HEADER)
;

-- Let's split composite genres into basic genres on separate rows.

DROP TABLE IF EXISTS split_movie_prep;

SELECT
    movie_id,
	release_year,
	regexp_split_to_table(genres, ',') AS genres
INTO TEMP TABLE split_movie_prep
FROM 
    movie_prep
;

-- For each movie, we have one, two or more basic genres, 
-- each time on a separate row. Let's turn rows into columns 
-- so that we have as many columns as basic genres. That will be done 
-- with a pivot table in Excel, after exporting movie_prep as a CSV file.

COPY (SELECT * FROM split_movie_prep) 
    TO 'E:\14_Data_Science_SQL\10_Cohort_Analysis\04_data_wrangling_movies_basic_genres_by_row.csv' 
    WITH (FORMAT CSV, HEADER)
;

-- The table delivered by pivot tables in Excel is 
-- E:\14_Data_Science_SQL\10_Cohort_Analysis\05_data_wrangling_movies_pivot_table_by_column.xlsx .
-- It is converted to a CSV file under the name
-- E:\14_Data_Science_SQL\10_Cohort_Analysis\06_data_wrangling_movies_file.csv .
-- Let's integrate this CSV file into the database "cohort-analysis". 

CREATE TABLE movies(
    movie_id integer PRIMARY KEY,
    release_year integer,
    Action integer, 
    Adventure integer, 
    Animation integer, 
    Children integer, 
    Comedy integer, 
    Crime integer, 
    Documentary integer, 
    Drama integer, 
    Fantasy integer, 
    Film_Noir integer, 
    Horror integer, 
    IMAX integer, 
    Musical integer, 
    Mystery integer, 
    Romance integer, 
    Sci_Fi integer, 
    Thriller integer, 
    War integer, 
    Western integer
);

COPY movies(movie_id, release_year, Action, Adventure, Animation, Children, 
Comedy, Crime, Documentary, Drama, Fantasy, Film_Noir, Horror, IMAX, Musical, 
Mystery, Romance, Sci_Fi, Thriller, War, Western) 
FROM PROGRAM
  'curl "https://raw.githubusercontent.com/Dev-P-L/Cohort-Analysis/master/06_data_wrangling_movies_file.csv"' 
  DELIMITER ',' CSV HEADER;	

-- After having created the table movies in the database
-- and having restored data, let's create a temporary table for ratings 
-- and save it in CSV format (in local and in the repository).

DROP TABLE IF EXISTS ratings_prep;

SELECT 
    rating_id,
	user_id,
	movie_id,
	rating,
	EXTRACT(year FROM to_timestamp(rating_timestamp)) AS rating_timestamp
INTO
    TEMP TABLE ratings_prep
FROM
    dataset    
;

-- Let's convert this temporary file into a CSV file (in local and in the repository).

COPY (SELECT * FROM ratings_prep) 
  TO 'E:\14_Data_Science_SQL\10_Cohort_Analysis\07_data_wrangling_ratings_file.csv' 
  WITH (FORMAT CSV, HEADER)
;

-- Let's create table "ratings" in the database "cohort-analysis"
-- and restore data from temporary table "ratings_prep" to the table "ratings".

DROP TABLE IF EXISTS ratings;

CREATE TABLE ratings(
    rating_id integer NOT NULL,
    user_id integer NOT NULL,
    movie_id integer NOT NULL,
    rating numeric, 
    rating_year date,
    PRIMARY KEY (rating_id, movie_id),
    FOREIGN KEY (movie_id) REFERENCES movies (movie_id)
    ON DELETE CASCADE
);

COPY ratings( 
    rating_id,
    user_id, 
    movie_id, 
    rating,
    rating_year
) 
FROM PROGRAM
    'curl "https://raw.githubusercontent.com/Dev-P-L/Cohort-Analysis/master/07_data_wrangling_ratings_file.csv"'
    DELIMITER ',' CSV HEADER;
	 	
-- We are now ready for preparatory analysis of data, before launching cohort analysis.
